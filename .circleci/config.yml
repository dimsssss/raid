# CircleCI configuration file

version: 2.1

orbs:
  aws-s3: circleci/aws-s3@x.y.z # use the AWS S3 orb in your configuration
  git-shallow-clone: guitarrapc/git-shallow-clone@2.4.0
  node: circleci/node@5.0.2

workflows: # Define a Workflow running the build job, then the deploy job
  version: 2
  build-deploy: # Make a workflow to build and deploy your project
  jobs:
    - build
    - deploy:
        requires:
          - build # Only run deploy job once the build job has completed
        filters:
        branches:
          only: main # Only deploy when the commit is on the Main branch
        steps:
          - checkout
          - aws-s3/sync:
              from: bucket
              to: 's3://raid-deployment/build'
              arguments: | # Optional arguments
              --acl public-read \
              --cache-control "max-age=86400"
              overwrite: true # default is false

  jobs:
    build:
      machine: true
      steps:
        - git-shallow-clone/checkout
        - restore_cache:
            keys:
              - v1-dependency-{{ checksum "package-lock.json" }}
              - v1-dependency-
        - run: docker run --name=mysql -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=raid -p 6603:3306 -d mysql:latest
        - run: docker run --name=redis -p 6604:6379 -d redis
        - node/install:
            node-version: '16.15'
        - run: node --version
        - run: npm ci
        - save_cache:
            key: v1-dependency-{{ checksum "package-lock.json" }}
            paths:
              - ./node_modules
        - run:
            command: |
              touch .env
              echo "DATABASE=${DATABASE}" >> .env
              echo "DATABASE_PORT=${DATABASE_PORT}" >> .env
              echo "DATABASE_USER=${DATABASE_USER}" >> .env
              echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .env            
              echo "DIALECT=${DIALECT}" >> .env
              echo "HOST=${HOST}" >> .env
              echo "MAX=${MAX}" >> .env
              echo "MIN=${MIN}" >> .env
              echo "REDIS_PORT=${REDIS_PORT}" >> .env
              cat .env
              npx sequelize-cli db:migrate
              npm run test
