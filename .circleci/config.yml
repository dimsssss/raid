# CircleCI configuration file

version: 2.1

orbs:
  git-shallow-clone: guitarrapc/git-shallow-clone@2.4.0
  node: circleci/node@5.0.2
  aws-code-deploy: circleci/aws-code-deploy@2.0.0 # Use the AWS CodeDeploy orb in your configuration

jobs:
  build:
    machine: true
    steps:
      - git-shallow-clone/checkout
      - restore_cache:
          keys:
            - v1-dependency-{{ checksum "package-lock.json" }}
            - v1-dependency-
      - run:
          command: docker run --name=mysql -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=raid -p 6603:3306 -d mysql:latest
      - run:
          command: docker run --name=redis -p 6604:6379 -d redis
      - node/install:
          node-version: '16.15'
      - run: node --version
      - run: npm ci
      - save_cache:
          key: v1-dependency-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          command: |
            touch .env
            echo "DATABASE=${DATABASE}" >> .env
            echo "DATABASE_PORT=${DATABASE_PORT}" >> .env
            echo "DATABASE_USER=${DATABASE_USER}" >> .env
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .env            
            echo "DIALECT=${DIALECT}" >> .env
            echo "HOST=${HOST}" >> .env
            echo "MAX=${MAX}" >> .env
            echo "MIN=${MIN}" >> .env
            echo "REDIS_PORT=${REDIS_PORT}" >> .env
            cat .env
            npx sequelize-cli db:migrate
            npm run test
  deploy:
    machine: true
    steps:
      - checkout
      - run: # Install the AWS CLI if it is not already included in the docker image
          name: Install awscli
          command: pip install awscli

      # - run:
      #     name: create build path
      #     command: mkdir ~/build

      # - run:
      #     name: zip
      #     command: zip -r ~/build/source.zip ./bin/* ./src/* ./app.js ./package.json ./config/config.js

      # - run:
      #     name: file access
      #     command: chmod 755 ~/build/source.zip

      - run: # Deploy to S3 using the sync command
          name: Deploy to S3
          command: aws s3 sync ~/build s3://raid-deployment/build --delete
workflows:
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build # Only run deploy job once the build job has completed
          filters:
            branches:
              only: main # Only deploy when the commit is on the Main branch
      - aws-code-deploy/deploy:
          requires:
            - build # Only run deploy job once the build job has completed
          filters:
            branches:
              only: main # Only deploy when the commit is on the Main branch
          application-name: ${CODE_DEPLOY_APPLICATION}
          deployment-group: ${CODE_DEPLOY_GROUP} # The name of a new deployment group for the specified application.
          service-role-arn: ${CODE_DEPLOY_SERVICE_ROLE} # The service role for a deployment group.
          bundle-bucket: ${CODE_DEPLOY_BUCKET} # The s3 bucket where an application revision will be stored.
          bundle-key: ${CODE_DEPLOY_BUCKET_KEY} # A ke
